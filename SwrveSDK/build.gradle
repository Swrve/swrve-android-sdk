apply plugin: 'com.android.library'

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    // Needed to publish all variants
    publishNonDefault true

    defaultConfig {
        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
    }

    buildTypes {
        release {}
        debug {}
    }

    productFlavors {
        core {}
        google {}
    }

    lintOptions {
        abortOnError true
    }
}

dependencies {
    compile project(':SwrveSDKCommon')
    compile project(':SwrveConversationSDK')
    compile 'com.google.code.gson:gson:2.2.+'
    compile 'com.android.support:support-v4:' + project.ANDROID_DESIGN_TOOLS_VERSION
    compile 'com.android.support:appcompat-v7:' + project.ANDROID_DESIGN_TOOLS_VERSION
    googleCompile 'com.google.android.gms:play-services-gcm:' + project.GOOGLE_GMS_TOOLS_VERSION
    googleCompile 'com.google.android.gms:play-services-ads:' + project.GOOGLE_GMS_TOOLS_VERSION
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

publishing {
    repositories {
        maven {
            url "$buildDir/../publish" // SwrveSDK/publish
        }
    }

    publications {
        core(MavenPublication) {
            artifactId swrveCoreArtifactId
            groupId swrveGroupId
            version swrveSdkVersion
            artifacts = [androidCoreJavadocsJar, "$buildDir/outputs/aar/${project.name}-core-release.aar", androidCoreSourcesJar]

            // The publication doesn't know about our dependencies due to components.java not being present in aar pieces
            // so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it.group == null || it.name == null || it.version == null) {
                        logger.log(LogLevel.ERROR, "Invalid dependency")
                    } else {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                }

                configurations.coreCompile.allDependencies.each {
                    if (it.group == null || it.name == null || it.version == null) {
                        logger.log(LogLevel.ERROR, "Invalid dependency")
                    } else {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                }
            }
        }
        google(MavenPublication) {
            artifactId swrveGoogleArtifactId
            groupId swrveGroupId
            version swrveSdkVersion
            artifacts = [androidGoogleJavadocsJar, "$buildDir/outputs/aar/${project.name}-google-release.aar", androidGoogleSourcesJar]

            // The publication doesn't know about our dependencies due to components.java not being present in aar pieces
            // so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    if (it.group == null || it.name == null || it.version == null) {
                        logger.log(LogLevel.ERROR, "Invalid dependency")
                    } else {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                }

                configurations.googleCompile.allDependencies.each {
                    if (it.group == null || it.name == null || it.version == null) {
                        logger.log(LogLevel.ERROR, "Invalid dependency")
                    } else {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'compile')
                    }
                }
            }
        }
    }
}

task androidCoreJavadoc(type: Javadoc) {
    description "Generates Javadoc for Core."
    source = files(android.sourceSets.main.java.srcDirs) + files(android.sourceSets.core.java.srcDirs)
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath = files(android.libraryVariants.core.javaCompile.classpath.files) + files(ext.androidJar)
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/README.md'
    failOnError false
}
task androidCoreJavadocsJar(type: Jar) {
    description "Package Javadoc for Core."
    classifier = 'javadoc'
    from androidCoreJavadoc
}
task androidCoreSourcesJar(type: Jar) {
    description "Package sources for Core."
    classifier = 'source'
    from files(android.sourceSets.main.java.srcDirs) + files(android.sourceSets.core.java.srcDirs)
}

task androidGoogleJavadoc(type: Javadoc) {
    description "Generates Javadoc for Google."
    source = files(android.sourceSets.main.java.srcDirs) + files(android.sourceSets.google.java.srcDirs)
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath = files(android.libraryVariants.google.javaCompile.classpath.files) + files(ext.androidJar)
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/README.md'
    failOnError false
}
task androidGoogleJavadocsJar(type: Jar) {
    description "Package Javadoc for Google."
    classifier = 'javadoc'
    from androidGoogleJavadoc
}
task androidGoogleSourcesJar(type: Jar) {
    description "Package sources for Google."
    classifier = 'source'
    from files(android.sourceSets.main.java.srcDirs) + files(android.sourceSets.google.java.srcDirs)
}
