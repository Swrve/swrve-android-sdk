apply plugin: 'maven-publish'
apply plugin: 'signing'

task androidConversationsJavadoc(type: Javadoc, dependsOn: "assembleRelease") {
    description "Generates Javadoc for release."
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
    failOnError true
    include 'com/swrve/**'

    // Use the release variant classpath
    android.libraryVariants.all { variant ->
        if (variant.name == "release") {
            source = variant.sourceSets.collect { it.java.sourceFiles }.inject { t, fc -> t + fc }
            doFirst {
                classpath += files(variant.javaCompileProvider.get().classpath.files)
            }
        }
    }
}
task androidConversationsJavadocsJar(type: Jar, dependsOn: androidConversationsJavadoc) {
    description "Package Javadoc for Conversations."
    archiveClassifier = 'javadoc'
    from androidConversationsJavadoc
}
task androidConversationsSourcesJar(type: Jar) {
    description "Package sources for Conversations."
    archiveClassifier = 'sources'
    from files(android.sourceSets.main.java.srcDirs)
}

if (project.hasProperty('SWRVE_CONVERSATIONS_ARTIFACT_ID')) {

    if (System.getenv('GPG_KEY_ID') != null) {
        project.ext['signing.keyId'] = System.getenv('GPG_KEY_ID')
        project.ext['signing.password'] = System.getenv('GPG_KEY_PASSPHRASE')
        project.ext['signing.secretKeyRingFile'] = System.getenv('GPG_KEYRING_FILE')
    }

    publishing {
        publications {
            conversation(MavenPublication) {

                artifactId project.SWRVE_CONVERSATIONS_ARTIFACT_ID
                groupId project.SWRVE_GROUP_ID
                version project.SWRVE_SDK_VERSION
                artifacts = ["$buildDir/outputs/aar/${project.name}-release.aar", androidConversationsJavadocsJar, androidConversationsSourcesJar]

                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', 'SwrveConversationSDK')
                    root.appendNode('description', 'SwrveConversationSDK is the conversation module to be used with SwrveSDK')
                    root.appendNode('url', 'https://github.com/Swrve/swrve-android-sdk')

                    def dependenciesNode = root.appendNode('dependencies')
                    configurations.getByName("releaseCompileClasspath").allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        if (it.name == 'SwrveSDKCommon') {
                            dependencyNode.appendNode('groupId', project.SWRVE_GROUP_ID)
                            dependencyNode.appendNode('artifactId', project.SWRVE_COMMON_ARTIFACT_ID)
                            dependencyNode.appendNode('version', project.SWRVE_SDK_VERSION)
                            dependencyNode.appendNode('scope', 'compile')
                        } else {
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            dependencyNode.appendNode('scope', 'compile')
                        }
                    }

                    def scm = root.appendNode('scm')
                    scm.appendNode('url', 'scm:git@github.com:Swrve/swrve-android-sdk.git')
                    scm.appendNode('connection', 'scm:git@github.com:Swrve/swrve-android-sdk.git')
                    scm.appendNode('developerConnection', 'scm:git@github.com:Swrve/swrve-android-sdk.git')

                    def license = root.appendNode('licenses').appendNode('license')
                    license.appendNode('name', 'The Apache Software License, Version 2.0')
                    license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')

                    def developer = root.appendNode('developers').appendNode('developer')
                    developer.appendNode('id', 'sdkdev')
                    developer.appendNode('name', 'Swrve SDK Developer')
                }
            }
        }
        repositories {
            maven {
                if (System.getenv('PUBLISH_TO_SONATYPE') != null) {
                    url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                    name = "sonatype"
                    credentials {
                        username System.getenv('SONATYPE_USER')
                        password System.getenv('SONATYPE_PASSWORD')
                    }
                } else {
                    url "$buildDir/../publish" // SwrveConversationSDK/publish
                }
            }
        }
    }

    String isSignAndroidRelease = System.getenv('SIGN_ANDROID_RELEASE')
    if (isSignAndroidRelease != null && isSignAndroidRelease.toBoolean()) {
        project.logger.lifecycle('Swrve: Setting sign publishing.publications')
        signing {
            sign publishing.publications
        }
    } else {
        project.logger.lifecycle('Swrve: Not setting sign publishing.publications')
    }
}